#!/usr/bin/env perl
use strict;
use warnings;
use utf8;

use File::Spec;
use File::Basename;
use lib File::Spec->catdir(dirname(__FILE__), '../lib');
use Proclet;
use Plack::Loader;
use Plack::Builder;
use Plack::App::Proxy;
use Yop::Web;

my $proclet = Proclet->new(color => 1);

# yop join and send
$proclet->service(
    code => sub {
        my $app = builder {
            enable 'Plack::Middleware::Static',
                path => qr{^(?:/static/)},
                root => File::Spec->catdir(dirname(__FILE__), '..');
            enable 'Plack::Middleware::Static',
                path => qr{^(?:/robots\.txt|/favicon\.ico)$},
                root => File::Spec->catdir(dirname(__FILE__), '..', 'static');
            enable 'Plack::Middleware::ReverseProxy';
            Yop::Web->to_app();
        };
        my $loader = Plack::Loader->load(
            'Starlet',
            port        => "5001",
            host        => 0,
            max_workers => 4,
        );
        $loader->run($app);
    },
    tag => "yop"
);

# kuiperbelt
$proclet->service(
    code => sub {
        exec("ekbo -p 5002")
    },
    tag => "kuiperbelt"
);

# organizer
$proclet->service(
    code => sub {
        my $loader = Plack::Loader->load(
            'Twiggy',
            port => "5000",
            host => 0,
        );
        my $app = builder {
            mount "/stream",
                Plack::App::Proxy->new(remote => "http://localhost:5002/")->to_app;
            mount "/",
                Plack::App::Proxy->new(remote => "http://localhost:5001/")->to_app;
        };
        $app = builder {
            enable "AxsLog",
                combined => 1,
                response_time => 1;
            $app;
        };
        $loader->run($app);
    },
    tag => "organizer"
);

$proclet->run;